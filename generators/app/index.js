"use strict";
const Generator = require("yeoman-generator");
const chalk = require("chalk");
const yosay = require("yosay");
const path = require("path");
const fs = require("fs");
const mkdirp = require("mkdirp");
const utils = require("../utils");
const log = utils.log;

module.exports = class extends Generator {
  constructor(args, opts) {
    super(args, opts);

    this.props = {
      projectName: "demo",
      name: "world"
    };
  }

  // Prompting() {
  //   // Have Yeoman greet the user.
  //   this.log(
  //     yosay(`Welcome to the perfect ${chalk.red("generator-wdcli")} generator!`)
  //   );

  //   const prompts = [
  //     {
  //       type: "confirm",
  //       name: "someAnswer",
  //       message: "Would you like to enable this option?",
  //       default: true
  //     }
  //   ];

  //   return this.prompt(prompts).then(props => {
  //     // To access props later use this.props.someAnswer;
  //     this.props = props;
  //   });
  // }
  prompting() {
    return this.prompt([
      {
        type: "input",
        name: "projectName",
        message: "请输入项目名字",
        default: "default-name"
      },
      {
        type: "confirm",
        name: "package",
        message: "需要package.json文件",
        default: true
      },
      {
        type: "input",
        name: "name",
        message: "请输入你的名字",
        default: "world"
      }
    ]).then(answers => {
      this.log("create project: ", answers.projectName);
      this.log("by: ", answers.name);
      this.props = answers;
    });
  }

  configuring() {
    const { projectName, name } = this.props;
    let packageSettings = {
      name: projectName,
      version: "0.0.1",
      description: "YOUR DESCRIPTION - Generated by generator-demo",
      main: "",
      scripts: {},
      repository: "",
      keywords: [],
      author: name,
      devDependencies: {},
      dependencies: {}
    };

    this.fs.writeJSON(
      this.destinationPath(projectName, "package.json"),
      packageSettings
    );
  }

  writing() {
    this.fs.copy(
      this.templatePath("dummyfile.txt"),
      this.destinationPath("dummyfile.txt")
    );
    const { projectName, name } = this.props;

    const temps = {
      "index.html": { name: this.props.name }
    };

    fs.readdir(this.sourceRoot(), (err, items) => {
      for (let item of items) {
        if (temps[item]) {
          this.fs.copyTpl(
            this.templatePath(item),
            this.destinationPath(projectName, item),
            temps[item]
          );
        } else {
          this.fs.copy(
            this.templatePath(item),
            this.destinationPath(projectName, item)
          );
        }
      }
    });
  }

  install() {
    log("installDependencies");
    // This.installDependencies();
  }

  end() {
    log("generator success", "green");
  }
};
